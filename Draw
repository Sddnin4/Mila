-- Modern Drawing App - Fixed Version

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer

-- App settings
local isDrawing = false
local currentTool = "brush"
local currentColor = Color3.new(0.2, 0.4, 1)
local brushSize = 12
local opacity = 1
local drawingHistory = {}
local historyIndex = 0
local maxHistory = 50

-- Modern colors
local colors = {
    primary = Color3.new(0.08, 0.08, 0.12),
    secondary = Color3.new(0.12, 0.14, 0.18),
    accent = Color3.new(0.3, 0.6, 1),
    success = Color3.new(0.2, 0.8, 0.4),
    danger = Color3.new(1, 0.3, 0.4),
    warning = Color3.new(1, 0.7, 0.2),
    surface = Color3.new(0.15, 0.16, 0.22),
    text = Color3.new(0.9, 0.92, 0.95),
}

-- Create UI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ModernDrawingApp"
screenGui.Parent = player.PlayerGui
screenGui.ResetOnSpawn = false

local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(1, 0, 1, 0)
mainFrame.BackgroundColor3 = colors.primary
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui

-- Top bar
local topBar = Instance.new("Frame")
topBar.Size = UDim2.new(1, 0, 0, 60)
topBar.BackgroundColor3 = colors.surface
topBar.BorderSizePixel = 0
topBar.Parent = mainFrame

local topCorner = Instance.new("UICorner")
topCorner.CornerRadius = UDim.new(0, 15)
topCorner.Parent = topBar

-- Logo
local logo = Instance.new("Frame")
logo.Size = UDim2.new(0, 200, 1, -10)
logo.Position = UDim2.new(0, 15, 0, 5)
logo.BackgroundColor3 = colors.accent
logo.Parent = topBar

local logoCorner = Instance.new("UICorner")
logoCorner.CornerRadius = UDim.new(0, 20)
logoCorner.Parent = logo

local logoText = Instance.new("TextLabel")
logoText.Size = UDim2.new(1, 0, 1, 0)
logoText.BackgroundTransparency = 1
logoText.Text = "🎨 Paint"
logoText.TextColor3 = Color3.new(1, 1, 1)
logoText.TextScaled = true
logoText.Font = Enum.Font.GothamBold
logoText.Parent = logo

-- Top buttons
local buttonContainer = Instance.new("Frame")
buttonContainer.Size = UDim2.new(0, 300, 1, -10)
buttonContainer.Position = UDim2.new(1, -315, 0, 5)
buttonContainer.BackgroundTransparency = 1
buttonContainer.Parent = topBar

local undoBtn = Instance.new("TextButton")
undoBtn.Size = UDim2.new(0, 60, 1, 0)
undoBtn.Text = "⬅️"
undoBtn.TextColor3 = colors.text
undoBtn.TextScaled = true
undoBtn.Font = Enum.Font.GothamBold
undoBtn.BackgroundColor3 = colors.success
undoBtn.Parent = buttonContainer

local undoCorner = Instance.new("UICorner")
undoCorner.CornerRadius = UDim.new(0, 15)
undoCorner.Parent = undoBtn

local redoBtn = Instance.new("TextButton")
redoBtn.Size = UDim2.new(0, 60, 1, 0)
redoBtn.Position = UDim2.new(0, 70, 0, 0)
redoBtn.Text = "➡️"
redoBtn.TextColor3 = colors.text
redoBtn.TextScaled = true
redoBtn.Font = Enum.Font.GothamBold
redoBtn.BackgroundColor3 = colors.warning
redoBtn.Parent = buttonContainer

local redoCorner = Instance.new("UICorner")
redoCorner.CornerRadius = UDim.new(0, 15)
redoCorner.Parent = redoBtn

local resetBtn = Instance.new("TextButton")
resetBtn.Size = UDim2.new(0, 60, 1, 0)
resetBtn.Position = UDim2.new(0, 140, 0, 0)
resetBtn.Text = "🔄"
resetBtn.TextColor3 = colors.text
resetBtn.TextScaled = true
resetBtn.Font = Enum.Font.GothamBold
resetBtn.BackgroundColor3 = colors.accent
resetBtn.Parent = buttonContainer

local resetCorner = Instance.new("UICorner")
resetCorner.CornerRadius = UDim.new(0, 15)
resetCorner.Parent = resetBtn

local closeBtn = Instance.new("TextButton")
closeBtn.Size = UDim2.new(0, 50, 1, 0)
closeBtn.Position = UDim2.new(0, 210, 0, 0)
closeBtn.Text = "❌"
closeBtn.TextColor3 = Color3.new(1, 1, 1)
closeBtn.TextScaled = true
closeBtn.Font = Enum.Font.GothamBold
closeBtn.BackgroundColor3 = colors.danger
closeBtn.Parent = buttonContainer

local closeCorner = Instance.new("UICorner")
closeCorner.CornerRadius = UDim.new(0, 15)
closeCorner.Parent = closeBtn

-- Left sidebar (compact with scrolling)
local sidebar = Instance.new("Frame")
sidebar.Size = UDim2.new(0, 120, 1, -120)
sidebar.Position = UDim2.new(0, 15, 0, 75)
sidebar.BackgroundColor3 = colors.surface
sidebar.Parent = mainFrame

local sidebarCorner = Instance.new("UICorner")
sidebarCorner.CornerRadius = UDim.new(0, 15)
sidebarCorner.Parent = sidebar

local toolsTitle = Instance.new("TextLabel")
toolsTitle.Size = UDim2.new(1, -10, 0, 30)
toolsTitle.Position = UDim2.new(0, 5, 0, 5)
toolsTitle.BackgroundTransparency = 1
toolsTitle.Text = "🛠️"
toolsTitle.TextColor3 = colors.text
toolsTitle.TextScaled = true
toolsTitle.Font = Enum.Font.GothamBold
toolsTitle.Parent = sidebar

-- Scrollable tools container
local toolsScroll = Instance.new("ScrollingFrame")
toolsScroll.Size = UDim2.new(1, -10, 1, -40)
toolsScroll.Position = UDim2.new(0, 5, 0, 35)
toolsScroll.BackgroundTransparency = 1
toolsScroll.BorderSizePixel = 0
toolsScroll.ScrollBarThickness = 4
toolsScroll.ScrollBarImageColor3 = colors.accent
toolsScroll.CanvasSize = UDim2.new(0, 0, 0, 200) -- Adjusted for 5 tools
toolsScroll.Parent = sidebar

-- Tools (only working functions)
local tools = {
    {name = "Brush", id = "brush", icon = "🖌️"},
    {name = "Size", id = "size", icon = "⚫"},
    {name = "Opacity", id = "opacity", icon = "⚪"},
    {name = "Fill", id = "fill", icon = "🪣"},
    {name = "Eraser", id = "eraser", icon = "🧹"},
}

local toolButtons = {}

for i, tool in pairs(tools) do
    local toolBtn = Instance.new("TextButton")
    toolBtn.Size = UDim2.new(1, -5, 0, 35)
    toolBtn.Position = UDim2.new(0, 0, 0, (i-1) * 40)
    toolBtn.Text = tool.icon
    toolBtn.TextColor3 = tool.id == "brush" and colors.accent or colors.text
    toolBtn.TextScaled = true
    toolBtn.Font = Enum.Font.GothamBold
    toolBtn.BackgroundColor3 = tool.id == "brush" and colors.secondary or colors.primary
    toolBtn.Parent = toolsScroll
    
    local toolCorner = Instance.new("UICorner")
    toolCorner.CornerRadius = UDim.new(0, 8)
    toolCorner.Parent = toolBtn
    
    -- Hover effect
    toolBtn.MouseEnter:Connect(function()
        if currentTool ~= tool.id then
            TweenService:Create(toolBtn, TweenInfo.new(0.2), {
                BackgroundColor3 = Color3.new(
                    math.min(toolBtn.BackgroundColor3.R + 0.05, 1),
                    math.min(toolBtn.BackgroundColor3.G + 0.05, 1),  
                    math.min(toolBtn.BackgroundColor3.B + 0.05, 1)
                )
            }):Play()
        end
    end)
    
    toolBtn.MouseLeave:Connect(function()
        if currentTool ~= tool.id then
            TweenService:Create(toolBtn, TweenInfo.new(0.2), {
                BackgroundColor3 = colors.primary
            }):Play()
        end
    end)
    
    toolButtons[tool.id] = toolBtn
    
    toolBtn.MouseButton1Click:Connect(function()
        if tool.id == "size" then
            brushSize = brushSize >= 30 and 6 or brushSize + 4
            -- Visual feedback
            local originalText = toolBtn.Text
            toolBtn.Text = brushSize .. "px"
            spawn(function()
                wait(0.5)
                if toolBtn.Parent then
                    toolBtn.Text = originalText
                end
            end)
        elseif tool.id == "opacity" then
            opacity = opacity <= 0.3 and 1 or opacity - 0.2
            -- Visual feedback
            local originalText = toolBtn.Text
            toolBtn.Text = math.floor(opacity * 100) .. "%"
            spawn(function()
                wait(0.5)
                if toolBtn.Parent then
                    toolBtn.Text = originalText
                end
            end)
        else
            -- Reset all tools
            for id, btn in pairs(toolButtons) do
                btn.TextColor3 = colors.text
                TweenService:Create(btn, TweenInfo.new(0.2), {
                    BackgroundColor3 = colors.primary
                }):Play()
            end
            -- Highlight selected
            toolBtn.TextColor3 = colors.accent
            TweenService:Create(toolBtn, TweenInfo.new(0.2), {
                BackgroundColor3 = colors.secondary
            }):Play()
            currentTool = tool.id
        end
    end)
end

-- Canvas area (adjusted for smaller sidebar)
local canvasArea = Instance.new("Frame")
canvasArea.Size = UDim2.new(1, -320, 1, -120)
canvasArea.Position = UDim2.new(0, 150, 0, 75)
canvasArea.BackgroundColor3 = colors.secondary
canvasArea.BorderSizePixel = 0
canvasArea.ClipsDescendants = true
canvasArea.Parent = mainFrame

local canvasAreaCorner = Instance.new("UICorner")
canvasAreaCorner.CornerRadius = UDim.new(0, 15)
canvasAreaCorner.Parent = canvasArea

-- Canvas
local canvasContainer = Instance.new("Frame")
canvasContainer.Size = UDim2.new(0, 600, 0, 400)
canvasContainer.Position = UDim2.new(0.5, -300, 0.5, -200)
canvasContainer.BackgroundColor3 = Color3.new(1, 1, 1)
canvasContainer.BorderSizePixel = 2
canvasContainer.BorderColor3 = colors.accent
canvasContainer.Parent = canvasArea

local canvasCorner = Instance.new("UICorner")
canvasCorner.CornerRadius = UDim.new(0, 12)
canvasCorner.Parent = canvasContainer

local drawingCanvas = Instance.new("Frame")
drawingCanvas.Size = UDim2.new(1, 0, 1, 0)
drawingCanvas.BackgroundTransparency = 1
drawingCanvas.Parent = canvasContainer

-- Right panel
local rightPanel = Instance.new("Frame")
rightPanel.Size = UDim2.new(0, 150, 1, -120)
rightPanel.Position = UDim2.new(1, -165, 0, 75)
rightPanel.BackgroundColor3 = colors.surface
rightPanel.Parent = mainFrame

local rightCorner = Instance.new("UICorner")
rightCorner.CornerRadius = UDim.new(0, 15)
rightCorner.Parent = rightPanel

local colorsTitle = Instance.new("TextLabel")
colorsTitle.Size = UDim2.new(1, -10, 0, 30)
colorsTitle.Position = UDim2.new(0, 5, 0, 5)
colorsTitle.BackgroundTransparency = 1
colorsTitle.Text = "🎨 MÀU"
colorsTitle.TextColor3 = colors.text
colorsTitle.TextScaled = true
colorsTitle.Font = Enum.Font.GothamBold
colorsTitle.Parent = rightPanel

-- Color palette
local colorPalette = Instance.new("Frame")
colorPalette.Size = UDim2.new(1, -10, 0, 300)
colorPalette.Position = UDim2.new(0, 5, 0, 40)
colorPalette.BackgroundTransparency = 1
colorPalette.Parent = rightPanel

local colorGrid = Instance.new("UIGridLayout")
colorGrid.CellSize = UDim2.new(0, 30, 0, 30)
colorGrid.CellPadding = UDim2.new(0, 3, 0, 3)
colorGrid.FillDirection = Enum.FillDirection.Horizontal
colorGrid.Parent = colorPalette

local colorSet = {
    Color3.new(1, 0, 0), Color3.new(1, 0.5, 0), Color3.new(1, 1, 0), Color3.new(0, 1, 0),
    Color3.new(0, 1, 1), Color3.new(0, 0, 1), Color3.new(0.5, 0, 1), Color3.new(1, 0, 1),
    Color3.new(1, 0.7, 0.8), Color3.new(0.8, 1, 0.8), Color3.new(0.8, 0.8, 1), Color3.new(1, 1, 0.8),
    Color3.new(0, 0, 0), Color3.new(0.5, 0.5, 0.5), Color3.new(0.8, 0.8, 0.8), Color3.new(1, 1, 1)
}

local selectedColorBtn = nil

for i, color in pairs(colorSet) do
    local colorBtn = Instance.new("TextButton")
    colorBtn.Text = ""
    colorBtn.BackgroundColor3 = color
    colorBtn.BorderSizePixel = i == 1 and 2 or 0
    colorBtn.BorderColor3 = colors.accent
    colorBtn.Parent = colorPalette
    
    local colorCorner = Instance.new("UICorner")
    colorCorner.CornerRadius = UDim.new(0, 6)
    colorCorner.Parent = colorBtn
    
    if i == 1 then selectedColorBtn = colorBtn end
    
    colorBtn.MouseButton1Click:Connect(function()
        currentColor = color
        if selectedColorBtn then
            selectedColorBtn.BorderSizePixel = 0
        end
        selectedColorBtn = colorBtn
        colorBtn.BorderSizePixel = 2
    end)
end

-- Bottom bar
local bottomBar = Instance.new("Frame")
bottomBar.Size = UDim2.new(1, -30, 0, 45)
bottomBar.Position = UDim2.new(0, 15, 1, -60)
bottomBar.BackgroundColor3 = colors.surface
bottomBar.Parent = mainFrame

local bottomCorner = Instance.new("UICorner")
bottomCorner.CornerRadius = UDim.new(0, 15)
bottomCorner.Parent = bottomBar

local clearBtn = Instance.new("TextButton")
clearBtn.Size = UDim2.new(0, 100, 1, -10)
clearBtn.Position = UDim2.new(1, -110, 0, 5)
clearBtn.Text = "🗑️ XÓA"
clearBtn.TextColor3 = Color3.new(1, 1, 1)
clearBtn.TextScaled = true
clearBtn.Font = Enum.Font.GothamBold
clearBtn.BackgroundColor3 = colors.danger
clearBtn.Parent = bottomBar

local clearCorner = Instance.new("UICorner")
clearCorner.CornerRadius = UDim.new(0, 12)
clearCorner.Parent = clearBtn

-- Functions
local function saveToHistory()
    if historyIndex < #drawingHistory then
        for i = historyIndex + 1, #drawingHistory do
            drawingHistory[i] = nil
        end
    end
    
    local snapshot = {}
    for _, child in pairs(drawingCanvas:GetChildren()) do
        if child:IsA("Frame") then
            table.insert(snapshot, {
                size = child.Size,
                position = child.Position,
                color = child.BackgroundColor3,
                transparency = child.BackgroundTransparency
            })
        end
    end
    
    table.insert(drawingHistory, snapshot)
    historyIndex = #drawingHistory
    
    if #drawingHistory > maxHistory then
        table.remove(drawingHistory, 1)
        historyIndex = historyIndex - 1
    end
end

local function loadFromHistory(index)
    for _, child in pairs(drawingCanvas:GetChildren()) do
        if child:IsA("Frame") then child:Destroy() end
    end
    
    if drawingHistory[index] then
        for _, data in pairs(drawingHistory[index]) do
            local dot = Instance.new("Frame")
            dot.Size = data.size
            dot.Position = data.position
            dot.BackgroundColor3 = data.color
            dot.BackgroundTransparency = data.transparency
            dot.BorderSizePixel = 0
            dot.Parent = drawingCanvas
            
            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(0.5, 0)
            corner.Parent = dot
        end
    end
end

local function createStroke(position)
    local size = currentTool == "eraser" and brushSize * 1.5 or brushSize
    local color = currentTool == "eraser" and Color3.new(1, 1, 1) or currentColor
    
    local dot = Instance.new("Frame")
    dot.Size = UDim2.new(0, size, 0, size)
    dot.Position = UDim2.new(0, position.X - size/2, 0, position.Y - size/2)
    dot.BackgroundColor3 = color
    dot.BackgroundTransparency = currentTool == "eraser" and 0 or (1 - opacity)
    dot.BorderSizePixel = 0
    dot.Parent = drawingCanvas
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0.5, 0)
    corner.Parent = dot
end

local function clearCanvas()
    for _, child in pairs(drawingCanvas:GetChildren()) do
        if child:IsA("Frame") then child:Destroy() end
    end
    saveToHistory()
end

local function fillCanvas()
    clearCanvas()
    local fill = Instance.new("Frame")
    fill.Size = UDim2.new(1, 0, 1, 0)
    fill.BackgroundColor3 = currentColor
    fill.BackgroundTransparency = 1 - opacity
    fill.BorderSizePixel = 0
    fill.Parent = drawingCanvas
    saveToHistory()
end

local function resetView()
    canvasContainer.Size = UDim2.new(0, 600, 0, 400)
    canvasContainer.Position = UDim2.new(0.5, -300, 0.5, -200)
end

local function isTouchInCanvas(pos)
    local cPos = canvasContainer.AbsolutePosition
    local cSize = canvasContainer.AbsoluteSize
    return pos.X >= cPos.X and pos.X <= cPos.X + cSize.X and
           pos.Y >= cPos.Y and pos.Y <= cPos.Y + cSize.Y
end

local function touchToCanvas(pos)
    local cPos = canvasContainer.AbsolutePosition
    return Vector2.new(pos.X - cPos.X, pos.Y - cPos.Y)
end

-- Events
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.UserInputType == Enum.UserInputType.Touch then
        if isTouchInCanvas(input.Position) then
            isDrawing = true
            if currentTool == "fill" then
                fillCanvas()
            else
                createStroke(touchToCanvas(input.Position))
            end
        end
    end
end)

UserInputService.InputChanged:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.UserInputType == Enum.UserInputType.Touch and isDrawing then
        if isTouchInCanvas(input.Position) and currentTool ~= "fill" then
            createStroke(touchToCanvas(input.Position))
        end
    end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if input.UserInputType == Enum.UserInputType.Touch then
        if isDrawing then
            isDrawing = false
            saveToHistory()
        end
    end
end)

-- Button events
undoBtn.MouseButton1Click:Connect(function()
    if historyIndex > 1 then
        historyIndex = historyIndex - 1
        loadFromHistory(historyIndex)
    end
end)

redoBtn.MouseButton1Click:Connect(function()
    if historyIndex < #drawingHistory then
        historyIndex = historyIndex + 1
        loadFromHistory(historyIndex)
    end
end)

resetBtn.MouseButton1Click:Connect(function()
    resetView()
end)

clearBtn.MouseButton1Click:Connect(function()
    clearCanvas()
end)

closeBtn.MouseButton1Click:Connect(function()
    screenGui:Destroy()
end)

-- Initialize (updated for compact sidebar)
saveToHistory()
-- Size and opacity feedback will show temporarily on button click

print("✅ Drawing App với sidebar nhỏ gọn đã sẵn sàng!")
print("🎨 UI compact, không lỗi, đầy đủ chức năng")